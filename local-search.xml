<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>京东CK提交帮助手册</title>
    <link href="/2022/10/31/JDCK/"/>
    <url>/2022/10/31/JDCK/</url>
    
    <content type="html"><![CDATA[<p><strong>本工具（京东Ck提交）旨在引导帮助用户方便快捷的抓取提交Cookie，仅个人使用，不做商业用途</strong></p><p>下文为本工具使用教程（以 v1.1.1.2-user 版本为例，<strong>文末附有最新版下载地址</strong>）</p><p>若本文加载缓慢，请复制链接到微信或浏览器中访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Link">https://hexo.sep.gay/2022/10/31/JDCK/<br></code></pre></td></tr></table></figure><p><strong>1.下载并安装App，打开首页中的【浏览器CK抓取工具】</strong>（点击左侧按钮可以切换浏览器模式，无痕可以重进抓取多账号Cookie，正常模式可以让软件内京东账户保持登录状态）</p><img src="https://cdn.staticaly.com/gh/hennessey-v/pic@master/img/30CCC760E812B2F1F1B40CC53EDA8FDC.png" srcset="/img/loading.gif" lazyload width="50%" height="50%" algin="center"><p><strong>2.在打开的页面中点击右上角登录按钮，登录账号</strong></p><img src="https://cdn.staticaly.com/gh/hennessey-v/pic@master/img/image.png" srcset="/img/loading.gif" lazyload width="50%" height="50%" algin="center"><img src="https://cdn.staticaly.com/gh/hennessey-v/pic@master/img/2B11B79F641FC095448226A06B4A308C.png" srcset="/img/loading.gif" lazyload width="50%" height="50%" algin="center"><p><strong>3.登录成功后点击右上角上传按钮，进入提交页面。</strong></p><p>  <strong>不了解参数作用的请勿随意修改参数，下方有具体的参数说明，如需修改，请仔细查看后修改！每  月更新一次足以</strong></p><p>  因为服务器原因，可能会出现提交缓慢，提交失败等情况，请耐心等待，通常这个时候我已经在尽      力修复了，一般半天内即可恢复正常</p><p><img src="https://cdn.staticaly.com/gh/hennessey-v/pic@master/img/image%201.png" srcset="/img/loading.gif" lazyload></p><p><img src="https://cdn.staticaly.com/gh/hennessey-v/pic@master/img/image%202.png" srcset="/img/loading.gif" lazyload></p><p><strong>PS：</strong></p><p><strong>软件更新地址：</strong><a href="https://vsop.lanzoub.com/b00q9rthe?password=f6js">https://vsop.lanzoub.com/b00q9rthe?password=f6js</a> <strong>密码：</strong>f6js</p><p><strong>其他问题详解</strong> ：</p><p><a href="https://flowus.cn/20e6c933-c671-43e6-81ff-6a3e97d9edf3">疑难解惑</a></p><p><strong>设置中的参数请勿修改，这里存放着抓取Cookie的京东接口地址，预防京东接口更换</strong></p><img src="https://cdn.staticaly.com/gh/hennessey-v/pic@master/img/9A2066D1D97676ED2E2971246C7B7689.png" srcset="/img/loading.gif" lazyload width="50%" height="50%" algin="center"><h2 id="疑难解惑："><a href="#疑难解惑：" class="headerlink" title="疑难解惑："></a><strong>疑难解惑：</strong></h2><p>U：怎么查看一天能获取多少京豆？</p><p>A：目前我采用的是WxPusher一对一推送方案，每个人都能收到自己的京豆资产推送</p><p>  但是需要在微信内关注公众号：<a href="https://wxpusher.zjiecode.com/wxuser/?type=1&id=34389#/follow">https://wxpusher.zjiecode.com/wxuser/?type=1&id=34389#/follow</a> 关注后提醒管理员，我会在后台配置，成功后每天早6晚8会各收到一次推送提醒</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/28/hello-world/"/>
    <url>/2022/10/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker 仓库管理 (6)</title>
    <link href="/2022/02/13/Docker06/"/>
    <url>/2022/02/13/Docker06/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-仓库管理"><a href="#Docker-仓库管理" class="headerlink" title="Docker 仓库管理"></a>Docker 仓库管理</h1><p>仓库（Repository）是集中存放镜像的地方。以下介绍一下 <a href="https://hub.docker.com/">Docker Hub</a>。当然不止 docker hub，只是远程的服务商不一样，操作都是一样的。</p><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/">Docker Hub</a>。</p><p>大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>在 <a href="https://hub.docker.com/">https://hub.docker.com</a> 免费注册一个 Docker 账号。</p><h3 id="登录和退出"><a href="#登录和退出" class="headerlink" title="登录和退出"></a>登录和退出</h3><p>登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker login<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//5974B2AE-945F-4DD0-A7C8-9D9B01BDAF62.jpg" srcset="/img/loading.gif" lazyload></p><p><strong>退出</strong></p><p>退出 docker hub 可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">logout</span></span><br></code></pre></td></tr></table></figure><p>拉取镜像</p><p>你可以通过 docker search 命令来查找官方仓库中的镜像，并利用 docker pull 命令来将它下载到本地。</p><p>以 ubuntu 为关键词进行搜索：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker search ubuntu<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-search22.png" srcset="/img/loading.gif" lazyload></p><p>使用 docker pull 将官方 ubuntu 镜像下载到本地：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker pull ubuntu <br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-pull22.png" srcset="/img/loading.gif" lazyload></p><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。</p><p>以下命令中的 username 请替换为你的 Docker 账号用户名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker tag ubuntu:18.04 username/ubuntu:18.04</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker image <span class="hljs-built_in">ls</span></span><br><br>REPOSITORY      TAG        IMAGE ID            CREATED           ...  <br>ubuntu          18.04      275d79972a86        6 days ago        ...  <br>username/ubuntu 18.04      275d79972a86        6 days ago        ...  <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker push username/ubuntu:18.04</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker search username/ubuntu</span><br><br>NAME             DESCRIPTION       STARS         OFFICIAL    AUTOMATED<br>username/ubuntu<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 容器连接 (5)</title>
    <link href="/2022/02/05/Docker05/"/>
    <url>/2022/02/05/Docker05/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-容器连接"><a href="#Docker-容器连接" class="headerlink" title="Docker 容器连接"></a>Docker 容器连接</h1><p>前面我们实现了通过网络端口来访问运行在 docker 容器内的服务。</p><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <strong>-P</strong> 或 <strong>-p</strong> 参数来指定端口映射。</p><p>下面我们来实现通过端口连接到一个 docker 容器。</p><hr><h2 id="网络端口映射"><a href="#网络端口映射" class="headerlink" title="网络端口映射"></a>网络端口映射</h2><p>我们创建了一个 python 应用的容器。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -d -P training/webapp python app.py<br>fce072cc88cee71b1cdceb57c2821d054a4a59f67da6b416fceb5593f059fc6d<br></code></pre></td></tr></table></figure><p>另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p><p>我们使用 <strong>-P</strong> 绑定端口号，使用 <strong>docker ps</strong> 可以看到容器端口 5000 绑定主机端口 32768。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker ps<br><span class="hljs-title class_">CONTAINER</span> <span class="hljs-title class_">ID</span>    <span class="hljs-title class_">IMAGE</span>               <span class="hljs-title class_">COMMAND</span>            ...           <span class="hljs-title class_">PORTS</span>                     <span class="hljs-title class_">NAMES</span><br>fce072cc88ce    training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>    ...     <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:</span><span class="hljs-number">32768</span>-&gt;<span class="hljs-number">5000</span>/tcp   grave_hopper<br></code></pre></td></tr></table></figure><p>我们也可以使用 <strong>-p</strong> 标识来指定容器端口绑定到主机端口。</p><p>两种方式的区别是:</p><ul><li><strong>-P :<strong>是容器内部端口</strong>随机</strong>映射到主机的端口。</li><li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker run -d -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> training/webapp python app.py<br><span class="hljs-attribute">33e4523d30aaf0258915c368e66e03b49535de0ef20317d3f639d40222ba6bc0</span><br><span class="hljs-attribute">runoob</span>@runoob:~$ docker ps<br><span class="hljs-attribute">CONTAINER</span> ID        IMAGE               COMMAND           ...           PORTS                     NAMES<br><span class="hljs-attribute">33e4523d30aa</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...   <span class="hljs-number">0.0.0.0:5000</span>-&gt;<span class="hljs-number">5000</span>/tcp    berserk_bartik<br><span class="hljs-attribute">fce072cc88ce</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...   <span class="hljs-number">0.0.0.0:32768</span>-&gt;<span class="hljs-number">5000</span>/tcp   grave_hopper<br></code></pre></td></tr></table></figure><p>另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker run -d -p <span class="hljs-number">127.0.0.1:5001</span>:<span class="hljs-number">5000</span> training/webapp python app.py<br><span class="hljs-attribute">95c6ceef88ca3e71eaf303c2833fd6701d8d1b2572b5613b5a932dfdfe8a857c</span><br><span class="hljs-attribute">runoob</span>@runoob:~$ docker ps<br><span class="hljs-attribute">CONTAINER</span> ID        IMAGE               COMMAND           ...     PORTS                                NAMES<br><span class="hljs-attribute">95c6ceef88ca</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...  <span class="hljs-number">5000</span>/tcp, <span class="hljs-number">127.0.0.1:5001</span>-&gt;<span class="hljs-number">5000</span>/tcp   adoring_stonebraker<br><span class="hljs-attribute">33e4523d30aa</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...  <span class="hljs-number">0.0.0.0:5000</span>-&gt;<span class="hljs-number">5000</span>/tcp               berserk_bartik<br><span class="hljs-attribute">fce072cc88ce</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...    <span class="hljs-number">0.0.0.0:32768</span>-&gt;<span class="hljs-number">5000</span>/tcp              grave_hopper<br></code></pre></td></tr></table></figure><p>这样我们就可以通过访问 127.0.0.1:5001 来访问容器的 5000 端口。</p><p>上面的例子中，默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 <strong>&#x2F;udp</strong>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker run -d -p <span class="hljs-number">127.0.0.1:5000</span>:<span class="hljs-number">5000</span>/udp training/webapp python app.py<br><span class="hljs-attribute">6779686f06f6204579c1d655dd8b2b31e8e809b245a97b2d3a8e35abe9dcd22a</span><br><span class="hljs-attribute">runoob</span>@runoob:~$ docker ps<br><span class="hljs-attribute">CONTAINER</span> ID        IMAGE               COMMAND           ...   PORTS                                NAMES<br><span class="hljs-attribute">6779686f06f6</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...   <span class="hljs-number">5000</span>/tcp, <span class="hljs-number">127.0.0.1:5000</span>-&gt;<span class="hljs-number">5000</span>/udp   drunk_visvesvaraya<br><span class="hljs-attribute">95c6ceef88ca</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...    <span class="hljs-number">5000</span>/tcp, <span class="hljs-number">127.0.0.1:5001</span>-&gt;<span class="hljs-number">5000</span>/tcp   adoring_stonebraker<br><span class="hljs-attribute">33e4523d30aa</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...     <span class="hljs-number">0.0.0.0:5000</span>-&gt;<span class="hljs-number">5000</span>/tcp               berserk_bartik<br><span class="hljs-attribute">fce072cc88ce</span>        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>   ...    <span class="hljs-number">0.0.0.0:32768</span>-&gt;<span class="hljs-number">5000</span>/tcp              grave_hopper<br></code></pre></td></tr></table></figure><p><strong>docker port</strong> 命令可以让我们快捷地查看端口的绑定情况。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">runoob@runoob:~$ docker port adoring_stonebraker <span class="hljs-number">5000</span><br><span class="hljs-number">127.0.0.1:5001</span><br></code></pre></td></tr></table></figure><hr><h2 id="Docker-容器互联"><a href="#Docker-容器互联" class="headerlink" title="Docker 容器互联"></a>Docker 容器互联</h2><p>端口映射并不是唯一把 docker 连接到另一个容器的方法。</p><p>docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。</p><p>docker 连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p><hr><h3 id="容器命名"><a href="#容器命名" class="headerlink" title="容器命名"></a>容器命名</h3><p>当我们创建一个容器的时候，docker 会自动对它进行命名。另外，我们也可以使用 <strong>–name</strong> 标识来命名容器，例如：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span> docker run -d -P --name runoob training/webapp python app.py<br><span class="hljs-number">43780</span>a6eabaaf14e590b6e849235c75f3012995403f97749775e38436db9a441<br></code></pre></td></tr></table></figure><p>我们可以使用 <strong>docker ps</strong> 命令来查看容器名称。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker ps -l<br><span class="hljs-title class_">CONTAINER</span> <span class="hljs-title class_">ID</span>     <span class="hljs-title class_">IMAGE</span>            <span class="hljs-title class_">COMMAND</span>           ...    <span class="hljs-title class_">PORTS</span>                     <span class="hljs-title class_">NAMES</span><br><span class="hljs-number">43780</span>a6eabaa     training/webapp   <span class="hljs-string">&quot;python app.py&quot;</span>  ...     <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:</span><span class="hljs-number">32769</span>-&gt;<span class="hljs-number">5000</span>/tcp   runoob<br></code></pre></td></tr></table></figure><h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><p>下面先创建一个新的 Docker 网络。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker network create <span class="hljs-literal">-d</span> bridge <span class="hljs-built_in">test-net</span><br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-net.png" srcset="/img/loading.gif" lazyload></p><p>参数说明：</p><p><strong>-d</strong>：参数指定 Docker 网络类型，有 bridge、overlay。</p><p>其中 overlay 网络类型用于 Swarm mode，在本小节中你可以忽略它。</p><h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3><p>运行一个容器并连接到新建的 test-net 网络:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ docker run -itd <span class="hljs-params">--name</span> test1 <span class="hljs-params">--network</span> test-net ubuntu <span class="hljs-string">/bin/bash</span><br></code></pre></td></tr></table></figure><p>打开新的终端，再运行一个容器并加入到 test-net 网络:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ docker run -itd <span class="hljs-params">--name</span> test2 <span class="hljs-params">--network</span> test-net ubuntu <span class="hljs-string">/bin/bash</span><br></code></pre></td></tr></table></figure><p>点击图片查看大图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-net2.png" srcset="/img/loading.gif" lazyload></p><p>下面通过 ping 来证明 test1 容器和 test2 容器建立了互联关系。</p><p>如果 test1、test2 容器内中无 ping 命令，则在容器内执行以下命令安装 ping（即学即用：可以在一个容器里安装好，提交容器到镜像，在以新的镜像重新运行以上俩个容器）。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br>apt install iputils-ping<br></code></pre></td></tr></table></figure><p>在 test1 容器输入以下命令：</p><p>点击图片查看大图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-net3.png" srcset="/img/loading.gif" lazyload></p><p>同理在 test2 容器也会成功连接到:</p><p>点击图片查看大图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-net4.png" srcset="/img/loading.gif" lazyload></p><p>这样，test1 容器和 test2 容器建立了互联关系。</p><p>如果你有多个容器之间需要互相连接，推荐使用 Docker Compose，后面会介绍。</p><hr><h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p>我们可以在宿主机的 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中增加以下内容来设置全部容器的 DNS：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>  <span class="hljs-string">&quot;dns&quot;</span> : [<br>    <span class="hljs-string">&quot;114.114.114.114&quot;</span>,<br>    <span class="hljs-string">&quot;8.8.8.8&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。</p><p>配置完，需要重启 docker 才能生效。</p><p>查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -it --<span class="hljs-built_in">rm</span>  ubuntu  <span class="hljs-built_in">cat</span> etc/resolv.conf</span><br></code></pre></td></tr></table></figure><p>点击图片查看大图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-net5.png" srcset="/img/loading.gif" lazyload></p><p><strong>手动指定容器的配置</strong></p><p>如果只想在指定的容器设置 DNS，则可以使用以下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker <span class="hljs-built_in">run</span> -it --rm -h host_ubuntu  <span class="hljs-attribute">--dns</span>=114.114.114.114 <span class="hljs-attribute">--dns-search</span>=test.com ubuntu<br></code></pre></td></tr></table></figure><p>参数说明：</p><p><strong>–rm</strong>：容器退出时自动清理容器内部的文件系统。</p><p><strong>-h HOSTNAME 或者 –hostname&#x3D;HOSTNAME</strong>： 设定容器的主机名，它会被写到容器内的 &#x2F;etc&#x2F;hostname 和 &#x2F;etc&#x2F;hosts。</p><p><strong>–dns&#x3D;IP_ADDRESS</strong>： 添加 DNS 服务器到容器的 &#x2F;etc&#x2F;resolv.conf 中，让容器用这个服务器来解析所有不在 &#x2F;etc&#x2F;hosts 中的主机名。</p><p><strong>–dns-search&#x3D;DOMAIN</strong>： 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。</p><p>点击图片查看大图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-net6.png" srcset="/img/loading.gif" lazyload></p><p>如果在容器启动时没有指定 <strong>–dns</strong> 和 <strong>–dns-search</strong>，Docker 会默认用宿主主机上的 &#x2F;etc&#x2F;resolv.conf 来配置容器的 DNS。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 镜像使用 (4)</title>
    <link href="/2022/02/04/Docker04/"/>
    <url>/2022/02/04/Docker04/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-镜像使用"><a href="#Docker-镜像使用" class="headerlink" title="Docker 镜像使用"></a>Docker 镜像使用</h1><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><p>下面我们来学习：</p><ul><li>1、管理和使用本地 Docker 主机镜像</li><li>2、创建镜像</li></ul><hr><h2 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a>列出镜像列表</h2><p>我们可以使用 <strong>docker images</strong> 来列出本地主机上的镜像。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker images           <br><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">14</span>.<span class="hljs-number">04</span>               <span class="hljs-number">90</span>d5884b1ee0        <span class="hljs-number">5</span> days ago          <span class="hljs-number">188</span> MB<br><span class="hljs-attribute">php</span>                 <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f40e9e0f10c8        <span class="hljs-number">9</span> days ago          <span class="hljs-number">444</span>.<span class="hljs-number">8</span> MB<br><span class="hljs-attribute">nginx</span>               latest              <span class="hljs-number">6</span>f8d099c3adc        <span class="hljs-number">12</span> days ago         <span class="hljs-number">182</span>.<span class="hljs-number">7</span> MB<br><span class="hljs-attribute">mysql</span>               <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f2e8d6c772c0        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">324</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">httpd</span>               latest              <span class="hljs-number">02</span>ef73cf1bc0        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">194</span>.<span class="hljs-number">4</span> MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">15</span>.<span class="hljs-number">10</span>               <span class="hljs-number">4</span>e3b13c8a266        <span class="hljs-number">4</span> weeks ago         <span class="hljs-number">136</span>.<span class="hljs-number">3</span> MB<br><span class="hljs-attribute">hello</span>-world         latest              <span class="hljs-number">690</span>ed74de00f        <span class="hljs-number">6</span> months ago        <span class="hljs-number">960</span> B<br><span class="hljs-attribute">training</span>/webapp     latest              <span class="hljs-number">6</span>fae60ef3446        <span class="hljs-number">11</span> months ago       <span class="hljs-number">348</span>.<span class="hljs-number">8</span> MB<br></code></pre></td></tr></table></figure><p>各个选项说明:</p><ul><li><strong>REPOSITORY：</strong>表示镜像的仓库源</li><li><strong>TAG：</strong>镜像的标签</li><li><strong>IMAGE ID：</strong>镜像ID</li><li><strong>CREATED：</strong>镜像创建时间</li><li><strong>SIZE：</strong>镜像大小</li></ul><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p><p>所以，我们如果要使用版本为15.10的ubuntu系统镜像来运行容器时，命令如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -t -i <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">15.10</span> /bin/bash <br>root<span class="hljs-variable">@d77ccb2e5cca</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li><strong>ubuntu:15.10</strong>: 这是指用 ubuntu 15.10 版本镜像为基础来启动容器。</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li></ul><p>如果要使用版本为 14.04 的 ubuntu 系统镜像来运行容器时，命令如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -t -i <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">14.04</span> /bin/bash <br>root<span class="hljs-variable">@39e968165990</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像。</p><hr><h2 id="获取一个新的镜像"><a href="#获取一个新的镜像" class="headerlink" title="获取一个新的镜像"></a>获取一个新的镜像</h2><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">Crunoob@runoob:~$ docker pull ubuntu:13.10</span><br><span class="hljs-section">13.10: Pulling from library/ubuntu</span><br><span class="hljs-section">6599cadaf950: Pull complete </span><br><span class="hljs-section">23eda618d451: Pull complete </span><br><span class="hljs-section">f0be3084efe9: Pull complete </span><br><span class="hljs-section">52de432f084b: Pull complete </span><br><span class="hljs-section">a3ed95caeb02: Pull complete </span><br><span class="hljs-section">Digest: sha256:15b79a6654811c8d992ebacdfbd5152fcf3d165e374e264076aa435214a947a3</span><br><span class="hljs-section">Status: Downloaded newer image for ubuntu:13.10</span><br></code></pre></td></tr></table></figure><p>下载完成后，我们可以直接使用这个镜像来运行容器。</p><hr><h2 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h2><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <strong><a href="https://hub.docker.com/">https://hub.docker.com/</a></strong></p><p>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span> docker search httpd<br></code></pre></td></tr></table></figure><p>点击图片查看大图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//423F2A2C-287A-4B03-855E-6A78E125B346.jpg" srcset="/img/loading.gif" lazyload alt="img">](<a href="https://www.runoob.com/wp-content/uploads/2016/05/423F2A2C-287A-4B03-855E-6A78E125B346.jpg">https://www.runoob.com/wp-content/uploads/2016/05/423F2A2C-287A-4B03-855E-6A78E125B346.jpg</a>)</p><p><strong>NAME:</strong> 镜像仓库源的名称</p><p><strong>DESCRIPTION:</strong> 镜像的描述</p><p><strong>OFFICIAL:</strong> 是否 docker 官方发布</p><p><strong>stars:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思。</p><p><strong>AUTOMATED:</strong> 自动构建。</p><hr><h2 id="拖取镜像"><a href="#拖取镜像" class="headerlink" title="拖取镜像"></a>拖取镜像</h2><p>我们决定使用上图中的 httpd 官方版本的镜像，使用命令 docker pull 来下载镜像。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">runoob@runoob:~$ docker pull httpd</span><br>Using default tag: latest<br><span class="hljs-section">latest: Pulling from library/httpd</span><br><span class="hljs-section">8b87079b7a06: Pulling fs layer </span><br><span class="hljs-section">a3ed95caeb02: Download complete </span><br><span class="hljs-section">0d62ec9c6a76: Download complete </span><br><span class="hljs-section">a329d50397b9: Download complete </span><br><span class="hljs-section">ea7c1f032b5c: Waiting </span><br><span class="hljs-section">be44112b72c7: Waiting</span><br></code></pre></td></tr></table></figure><p>下载完成后，我们就可以使用这个镜像了。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run httpd<br></code></pre></td></tr></table></figure><hr><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>镜像删除使用 <strong>docker rmi</strong> 命令，比如我们删除 hello-world 镜像：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker rmi hello-world<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-rmi-image.png" srcset="/img/loading.gif" lazyload alt="img"></p><hr><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p><ul><li>1、从已经创建的容器中更新镜像，并且提交这个镜像</li><li>2、使用 Dockerfile 指令来创建一个新的镜像</li></ul><h3 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h3><p>更新镜像之前，我们需要使用镜像来创建一个容器。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -t -i <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">15.10</span> /bin/bash<br>root<span class="hljs-variable">@e218edb10161</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>在运行的容器内使用 <strong>apt-get update</strong> 命令进行更新。</p><p>在完成操作之后，输入 exit 命令来退出这个容器。</p><p>此时 ID 为 e218edb10161 的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit 来提交容器副本。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">runoob<span class="hljs-title">@runoob</span>:~$ docker commit -m<span class="hljs-operator">=</span><span class="hljs-string">&quot;has update&quot;</span> -a<span class="hljs-operator">=</span><span class="hljs-string">&quot;runoob&quot;</span> e<span class="hljs-number">218</span>edb<span class="hljs-number">10161</span> runoob/ubuntu:v<span class="hljs-number">2</span><br>sha<span class="hljs-number">256</span>:<span class="hljs-number">70</span>bf<span class="hljs-number">1840</span>fd<span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>d<span class="hljs-number">2</span>d<span class="hljs-number">8</span>ef<span class="hljs-number">0</span>a<span class="hljs-number">42</span>a<span class="hljs-number">817</span>eb<span class="hljs-number">29</span>f<span class="hljs-number">854</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>af<span class="hljs-number">8</span>f<span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">59</span>fc<span class="hljs-number">03</span>ac<span class="hljs-number">7</span>bdee<span class="hljs-number">9545</span>aff<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>各个参数说明：</p><ul><li><strong>-m:</strong> 提交的描述信息</li><li><strong>-a:</strong> 指定镜像作者</li><li><strong>e218edb10161：</strong>容器 ID</li><li><strong>runoob&#x2F;ubuntu:v2:</strong> 指定要创建的目标镜像名</li></ul><p>我们可以使用 <strong>docker images</strong> 命令来查看我们的新镜像 <strong>runoob&#x2F;ubuntu:v2</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker images<br><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">runoob</span>/ubuntu       v2                  <span class="hljs-number">70</span>bf1840fd7c        <span class="hljs-number">15</span> seconds ago      <span class="hljs-number">158</span>.<span class="hljs-number">5</span> MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">14</span>.<span class="hljs-number">04</span>               <span class="hljs-number">90</span>d5884b1ee0        <span class="hljs-number">5</span> days ago          <span class="hljs-number">188</span> MB<br><span class="hljs-attribute">php</span>                 <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f40e9e0f10c8        <span class="hljs-number">9</span> days ago          <span class="hljs-number">444</span>.<span class="hljs-number">8</span> MB<br><span class="hljs-attribute">nginx</span>               latest              <span class="hljs-number">6</span>f8d099c3adc        <span class="hljs-number">12</span> days ago         <span class="hljs-number">182</span>.<span class="hljs-number">7</span> MB<br><span class="hljs-attribute">mysql</span>               <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f2e8d6c772c0        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">324</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">httpd</span>               latest              <span class="hljs-number">02</span>ef73cf1bc0        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">194</span>.<span class="hljs-number">4</span> MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">15</span>.<span class="hljs-number">10</span>               <span class="hljs-number">4</span>e3b13c8a266        <span class="hljs-number">4</span> weeks ago         <span class="hljs-number">136</span>.<span class="hljs-number">3</span> MB<br><span class="hljs-attribute">hello</span>-world         latest              <span class="hljs-number">690</span>ed74de00f        <span class="hljs-number">6</span> months ago        <span class="hljs-number">960</span> B<br><span class="hljs-attribute">training</span>/webapp     latest              <span class="hljs-number">6</span>fae60ef3446        <span class="hljs-number">12</span> months ago       <span class="hljs-number">348</span>.<span class="hljs-number">8</span> MB<br></code></pre></td></tr></table></figure><p>使用我们的新镜像 <strong>runoob&#x2F;ubuntu</strong> 来启动一个容器</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -t -i runoob/<span class="hljs-symbol">ubuntu:</span>v2 /bin/bash                            <br>root<span class="hljs-variable">@1a9fbdeb5da3</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>我们使用命令 <strong>docker build</strong> ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">runoob@runoob:~$ cat Dockerfile <br><span class="hljs-keyword">FROM</span>    centos:<span class="hljs-number">6.7</span><br><span class="hljs-keyword">MAINTAINER</span>      Fisher <span class="hljs-string">&quot;fisher@sudops.com&quot;</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash">     /bin/echo <span class="hljs-string">&#x27;root:123456&#x27;</span> |chpasswd</span><br><span class="hljs-keyword">RUN</span><span class="language-bash">     useradd runoob</span><br><span class="hljs-keyword">RUN</span><span class="language-bash">     /bin/echo <span class="hljs-string">&#x27;runoob:123456&#x27;</span> |chpasswd</span><br><span class="hljs-keyword">RUN</span><span class="language-bash">     /bin/echo -e <span class="hljs-string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/local</span><br><span class="hljs-keyword">EXPOSE</span>  <span class="hljs-number">22</span><br><span class="hljs-keyword">EXPOSE</span>  <span class="hljs-number">80</span><br><span class="hljs-keyword">CMD</span><span class="language-bash">     /usr/sbin/sshd -D</span><br></code></pre></td></tr></table></figure><p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</p><p>第一条FROM，指定使用哪个镜像源</p><p>RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。</p><p>然后，我们使用 Dockerfile 文件，通过 docker build 命令来构建一个镜像。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">runoob@runoob:~$ docker build -t runoob/centos:6.7 .<br>Sending build context <span class="hljs-keyword">to</span> Docker daemon 17.92 kB<br><span class="hljs-keyword">Step</span> 1 : <span class="hljs-keyword">FROM</span> centos:6.7<br> ---&amp;gt; d95b5ca17cc3<br><span class="hljs-keyword">Step</span> 2 : MAINTAINER Fisher <span class="hljs-string">&quot;fisher@sudops.com&quot;</span><br> ---&amp;gt; Using cache<br> ---&amp;gt; 0c92299c6f03<br><span class="hljs-keyword">Step</span> 3 : <span class="hljs-built_in">RUN</span> /bin/echo <span class="hljs-string">&#x27;root:123456&#x27;</span> |chpasswd<br> ---&amp;gt; Using cache<br> ---&amp;gt; 0397ce2fbd0a<br><span class="hljs-keyword">Step</span> 4 : <span class="hljs-built_in">RUN</span> useradd runoob<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-t</strong> ：指定要创建的目标镜像名</li><li><strong>.</strong> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</li></ul><p>使用docker images 查看创建的镜像已经在列表中存在,镜像ID为860c279d2fec</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker images <br><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED              SIZE<br><span class="hljs-attribute">runoob</span>/centos       <span class="hljs-number">6</span>.<span class="hljs-number">7</span>                 <span class="hljs-number">860</span>c279d2fec        About a minute ago   <span class="hljs-number">190</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">runoob</span>/ubuntu       v2                  <span class="hljs-number">70</span>bf1840fd7c        <span class="hljs-number">17</span> hours ago         <span class="hljs-number">158</span>.<span class="hljs-number">5</span> MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">14</span>.<span class="hljs-number">04</span>               <span class="hljs-number">90</span>d5884b1ee0        <span class="hljs-number">6</span> days ago           <span class="hljs-number">188</span> MB<br><span class="hljs-attribute">php</span>                 <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f40e9e0f10c8        <span class="hljs-number">10</span> days ago          <span class="hljs-number">444</span>.<span class="hljs-number">8</span> MB<br><span class="hljs-attribute">nginx</span>               latest              <span class="hljs-number">6</span>f8d099c3adc        <span class="hljs-number">12</span> days ago          <span class="hljs-number">182</span>.<span class="hljs-number">7</span> MB<br><span class="hljs-attribute">mysql</span>               <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f2e8d6c772c0        <span class="hljs-number">3</span> weeks ago          <span class="hljs-number">324</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">httpd</span>               latest              <span class="hljs-number">02</span>ef73cf1bc0        <span class="hljs-number">3</span> weeks ago          <span class="hljs-number">194</span>.<span class="hljs-number">4</span> MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">15</span>.<span class="hljs-number">10</span>               <span class="hljs-number">4</span>e3b13c8a266        <span class="hljs-number">5</span> weeks ago          <span class="hljs-number">136</span>.<span class="hljs-number">3</span> MB<br><span class="hljs-attribute">hello</span>-world         latest              <span class="hljs-number">690</span>ed74de00f        <span class="hljs-number">6</span> months ago         <span class="hljs-number">960</span> B<br><span class="hljs-attribute">centos</span>              <span class="hljs-number">6</span>.<span class="hljs-number">7</span>                 d95b5ca17cc3        <span class="hljs-number">6</span> months ago         <span class="hljs-number">190</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">training</span>/webapp     latest              <span class="hljs-number">6</span>fae60ef3446        <span class="hljs-number">12</span> months ago        <span class="hljs-number">348</span>.<span class="hljs-number">8</span> MB<br></code></pre></td></tr></table></figure><p>我们可以使用新的镜像来创建容器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">runoob@runoob:~$ docker <span class="hljs-built_in">run</span> -t -i runoob/centos:6.7  /bin/bash<br>[root@41c28d18b5fb /]# id runoob<br><span class="hljs-attribute">uid</span>=500(runoob) <span class="hljs-attribute">gid</span>=500(runoob) <span class="hljs-attribute">groups</span>=500(runoob)<br></code></pre></td></tr></table></figure><p>从上面看到新镜像已经包含我们创建的用户 runoob。</p><h3 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h3><p>我们可以使用 docker tag 命令，为镜像添加一个新的标签。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">runoob@runoob:~$ docker <span class="hljs-keyword">tag</span> <span class="hljs-title">860c279d2fec</span> runoob/centos:dev<br></code></pre></td></tr></table></figure><p>docker tag 镜像ID，这里是 860c279d2fec ,用户名称、镜像源名(repository name)和新的标签名(tag)。</p><p>使用 docker images 命令可以看到，ID为860c279d2fec的镜像多一个标签。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker images<br><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">runoob</span>/centos       <span class="hljs-number">6</span>.<span class="hljs-number">7</span>                 <span class="hljs-number">860</span>c279d2fec        <span class="hljs-number">5</span> hours ago         <span class="hljs-number">190</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">runoob</span>/centos       dev                 <span class="hljs-number">860</span>c279d2fec        <span class="hljs-number">5</span> hours ago         <span class="hljs-number">190</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">runoob</span>/ubuntu       v2                  <span class="hljs-number">70</span>bf1840fd7c        <span class="hljs-number">22</span> hours ago        <span class="hljs-number">158</span>.<span class="hljs-number">5</span> MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">14</span>.<span class="hljs-number">04</span>               <span class="hljs-number">90</span>d5884b1ee0        <span class="hljs-number">6</span> days ago          <span class="hljs-number">188</span> MB<br><span class="hljs-attribute">php</span>                 <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f40e9e0f10c8        <span class="hljs-number">10</span> days ago         <span class="hljs-number">444</span>.<span class="hljs-number">8</span> MB<br><span class="hljs-attribute">nginx</span>               latest              <span class="hljs-number">6</span>f8d099c3adc        <span class="hljs-number">13</span> days ago         <span class="hljs-number">182</span>.<span class="hljs-number">7</span> MB<br><span class="hljs-attribute">mysql</span>               <span class="hljs-number">5</span>.<span class="hljs-number">6</span>                 f2e8d6c772c0        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">324</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">httpd</span>               latest              <span class="hljs-number">02</span>ef73cf1bc0        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">194</span>.<span class="hljs-number">4</span> MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">15</span>.<span class="hljs-number">10</span>               <span class="hljs-number">4</span>e3b13c8a266        <span class="hljs-number">5</span> weeks ago         <span class="hljs-number">136</span>.<span class="hljs-number">3</span> MB<br><span class="hljs-attribute">hello</span>-world         latest              <span class="hljs-number">690</span>ed74de00f        <span class="hljs-number">6</span> months ago        <span class="hljs-number">960</span> B<br><span class="hljs-attribute">centos</span>              <span class="hljs-number">6</span>.<span class="hljs-number">7</span>                 d95b5ca17cc3        <span class="hljs-number">6</span> months ago        <span class="hljs-number">190</span>.<span class="hljs-number">6</span> MB<br><span class="hljs-attribute">training</span>/webapp     latest              <span class="hljs-number">6</span>fae60ef3446        <span class="hljs-number">12</span> months ago       <span class="hljs-number">348</span>.<span class="hljs-number">8</span> MB<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 容器使用 (3)</title>
    <link href="/2022/02/04/Docker03/"/>
    <url>/2022/02/04/Docker03/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-容器使用"><a href="#Docker-容器使用" class="headerlink" title="Docker 容器使用"></a>Docker 容器使用</h1><hr><h2 id="Docker-客户端"><a href="#Docker-客户端" class="headerlink" title="Docker 客户端"></a>Docker 客户端</h2><p>docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker</span><br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker27.png" srcset="/img/loading.gif" lazyload></p><p>可以通过命令 <strong>docker command –help</strong> 更深入的了解指定的 Docker 命令使用方法。</p><p>例如我们要查看 <strong>docker stats</strong> 指令的具体使用方法：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker stats --help</span><br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker28.png" srcset="/img/loading.gif" lazyload></p><hr><h2 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker pull ubuntu<br></code></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> ubuntu /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-container-run.png" srcset="/img/loading.gif" lazyload></p><p>参数说明：</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li><strong>ubuntu</strong>: ubuntu 镜像。</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li></ul><p>要退出终端，直接输入 <strong>exit</strong>:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ed09e4490c57</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># exit</span><br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-container-exit.png" srcset="/img/loading.gif" lazyload></p><h3 id="启动已停止运行的容器"><a href="#启动已停止运行的容器" class="headerlink" title="启动已停止运行的容器"></a>启动已停止运行的容器</h3><p>查看所有的容器命令如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span><br></code></pre></td></tr></table></figure><p>点击图片查看大图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-container-psa.png" srcset="/img/loading.gif" lazyload></p><p>使用 docker start 启动一个已停止的容器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker <span class="hljs-built_in">start</span> b750bbbcfd88 <br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-container-start.png" srcset="/img/loading.gif" lazyload></p><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 <strong>-d</strong> 指定容器的运行模式。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ docker <span class="hljs-built_in">run</span> -itd <span class="hljs-comment">--name ubuntu-test ubuntu /bin/bash</span><br></code></pre></td></tr></table></figure><p>点击图片查看大图：<br><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-run-d.png" srcset="/img/loading.gif" lazyload></p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-run-d2.png" srcset="/img/loading.gif" lazyload></p><p><strong>注：</strong>加了 <strong>-d</strong> 参数默认不会进入容器，想要进入容器需要使用指令 <strong>docker exec</strong>（下面会介绍到）。</p><h3 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h3><p>停止容器的命令如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ docker stop &lt;容器 ID&gt;<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-stop-1.png" srcset="/img/loading.gif" lazyload></p><p>停止的容器可以通过 docker restart 重启：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ docker restart <span class="hljs-tag">&lt;<span class="hljs-name">容器</span> <span class="hljs-attr">ID</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-stop-2.png" srcset="/img/loading.gif" lazyload></p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li><strong>docker attach</strong></li><li><strong>docker exec</strong>：推荐大家使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。</li></ul><p><strong>attach 命令</strong></p><p>下面演示了使用 docker attach 命令。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ docker attach <span class="hljs-number">1e560</span>fca3906 <br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-attach.png" srcset="/img/loading.gif" lazyload></p><p><strong>注意：</strong> 如果从这个容器退出，会导致容器的停止。</p><p><strong>exec 命令</strong></p><p>下面演示了使用 docker exec 命令。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it <span class="hljs-number">243</span>c32535da7 <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-exec.png" srcset="/img/loading.gif" lazyload></p><p><strong>注意：</strong> 如果从这个容器退出，容器不会停止，这就是为什么推荐大家使用 <strong>docker exec</strong> 的原因。</p><p>更多参数说明请使用 <strong>docker exec –help</strong> 命令查看。</p><h3 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h3><p><strong>导出容器</strong></p><p>如果要导出本地某个容器，可以使用 <strong>docker export</strong> 命令。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">$ docker ex<span class="hljs-keyword">port</span> 1e560fca3906 &gt; ubuntu.tar<br></code></pre></td></tr></table></figure><p>导出容器 1e560fca3906 快照到本地文件 ubuntu.tar。</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-export.png" srcset="/img/loading.gif" lazyload></p><p>这样将导出容器快照到本地文件。</p><p><strong>导入容器快照</strong></p><p>可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test&#x2F;ubuntu:v1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> docker/ubuntu.tar | docker import - <span class="hljs-built_in">test</span>/ubuntu:v1</span><br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-import.png" srcset="/img/loading.gif" lazyload></p><p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ docker import http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/exampleimage.tgz example/im</span>agerepo<br></code></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除容器使用 <strong>docker rm</strong> 命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> <span class="hljs-number">1</span>e560fca3906<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker-container-rmi.png" srcset="/img/loading.gif" lazyload></p><p>下面的命令可以清理掉所有处于终止状态的容器。</p><p>$ docker container prune</p><hr><h2 id="运行一个-web-应用"><a href="#运行一个-web-应用" class="headerlink" title="运行一个 web 应用"></a>运行一个 web 应用</h2><p>前面我们运行的容器并没有一些什么特别的用处。</p><p>接下来让我们尝试使用 docker 构建一个 web 应用程序。</p><p>我们将在docker容器中运行一个 Python Flask 应用来运行一个web应用。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker pull training/webapp  # 载入镜像</span><br>runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker run -d -P training/webapp python app.py</span><br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker29.png" srcset="/img/loading.gif" lazyload></p><p>参数说明:</p><ul><li>**-d:**让容器在后台运行。</li><li>**-P:**将容器内部使用的网络端口随机映射到我们使用的主机上。</li></ul><hr><h2 id="查看-WEB-应用容器"><a href="#查看-WEB-应用容器" class="headerlink" title="查看 WEB 应用容器"></a>查看 WEB 应用容器</h2><p>使用 docker ps 来查看我们正在运行的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">runoob@runoob:~<span class="hljs-comment">#  docker ps</span><br>CONTAINER ID        IMAGE               COMMAND             ...        PORTS                 <br>d3d5e39ed9d3        training/webapp     <span class="hljs-string">&quot;python app.py&quot;</span>     ...        0.0.0.0:32769-&gt;5000/tcp<br></code></pre></td></tr></table></figure><p>这里多了端口信息。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">PORTS<br><span class="hljs-number">0.0.0.0:32769</span>-&gt;<span class="hljs-number">5000</span>/tcp<br></code></pre></td></tr></table></figure><p>Docker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32769 上。</p><p>这时我们可以通过浏览器访问WEB应用</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker31.png" srcset="/img/loading.gif" lazyload></p><p>我们也可以通过 -p 参数来设置不一样的端口：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -d -p <span class="hljs-number">5000</span><span class="hljs-symbol">:</span><span class="hljs-number">5000</span> training/webapp python app.py<br></code></pre></td></tr></table></figure><p><strong>docker ps</strong>查看正在运行的容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">runoob@runoob:~<span class="hljs-comment">#  docker ps</span><br>CONTAINER ID        IMAGE                             PORTS                     NAMES<br>bf08b7f2cd89        training<span class="hljs-regexp">/webapp     ...        0.0.0.0:5000-&gt;5000/</span>tcp    wizardly_chandrasekhar<br>d3d5e39ed9d3        training<span class="hljs-regexp">/webapp     ...        0.0.0.0:32769-&gt;5000/</span>tcp   xenodochial_hoov<br></code></pre></td></tr></table></figure><p>容器内部的 5000 端口映射到我们本地主机的 5000 端口上。</p><hr><h2 id="网络端口的快捷方式"><a href="#网络端口的快捷方式" class="headerlink" title="网络端口的快捷方式"></a>网络端口的快捷方式</h2><p>通过 <strong>docker ps</strong> 命令可以查看到容器的端口映射，<strong>docker</strong> 还提供了另一个快捷方式 <strong>docker port</strong>，使用 <strong>docker port</strong> 可以查看指定 （ID 或者名字）容器的某个确定端口映射到宿主机的端口号。</p><p>上面我们创建的 web 应用容器 ID 为 <strong>bf08b7f2cd89</strong> 名字为 <strong>wizardly_chandrasekhar</strong>。</p><p>我可以使用 <strong>docker port bf08b7f2cd89</strong> 或 <strong>docker port wizardly_chandrasekhar</strong> 来查看容器端口的映射情况。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker port bf08b7f2cd89<br><span class="hljs-number">5000</span>/tcp -&gt; <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:</span><span class="hljs-number">5000</span><br>runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker port wizardly_chandrasekhar<br><span class="hljs-number">5000</span>/tcp -&gt; <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:</span><span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><hr><h2 id="查看-WEB-应用程序日志"><a href="#查看-WEB-应用程序日志" class="headerlink" title="查看 WEB 应用程序日志"></a>查看 WEB 应用程序日志</h2><p>docker logs [ID或者名字] 可以查看容器内部的标准输出。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">runoob@runoob:~$ docker logs -f bf08b7f2cd89<br> * Running on http://<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">5000</span>/ (Press CTRL+C to quit)<br><span class="hljs-number">192.168.239.1</span> - - <span class="hljs-string">[09/May/2016 16:30:37]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br><span class="hljs-number">192.168.239.1</span> - - <span class="hljs-string">[09/May/2016 16:30:37]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /favicon.ico HTTP/1.1&quot;</span> <span class="hljs-number">404</span> -<br></code></pre></td></tr></table></figure><p><strong>-f:</strong> 让 <strong>docker logs</strong> 像使用 <strong>tail -f</strong> 一样来输出容器内部的标准输出。</p><p>从上面，我们可以看到应用程序使用的是 5000 端口并且能够查看到应用程序的访问日志。</p><hr><h2 id="查看WEB应用程序容器的进程"><a href="#查看WEB应用程序容器的进程" class="headerlink" title="查看WEB应用程序容器的进程"></a>查看WEB应用程序容器的进程</h2><p>我们还可以使用 docker top 来查看容器内部运行的进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">runoob</span>@runoob:~$ docker top wizardly_chandrasekhar<br><span class="hljs-attribute">UID</span>     PID         PPID          ...       TIME                CMD<br><span class="hljs-attribute">root</span>    <span class="hljs-number">23245</span>       <span class="hljs-number">23228</span>         ...       <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>            python app.py<br></code></pre></td></tr></table></figure><hr><h2 id="检查-WEB-应用程序"><a href="#检查-WEB-应用程序" class="headerlink" title="检查 WEB 应用程序"></a>检查 WEB 应用程序</h2><p>使用 <strong>docker inspect</strong> 来查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker inspect wizardly_chandrasekhar<br>[<br>    &#123;<br>        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;bf08b7f2cd897b5964943134aa6d373e355c286db9b9885b1f60b6e8f82b2b85&quot;</span>,<br>        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2018-09-17T01:41:26.174228707Z&quot;</span>,<br>        <span class="hljs-string">&quot;Path&quot;</span>: <span class="hljs-string">&quot;python&quot;</span>,<br>        <span class="hljs-string">&quot;Args&quot;</span>: [<br>            <span class="hljs-string">&quot;app.py&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;State&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Status&quot;</span>: <span class="hljs-string">&quot;running&quot;</span>,<br>            <span class="hljs-string">&quot;Running&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;Paused&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Restarting&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;OOMKilled&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Dead&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Pid&quot;</span>: <span class="hljs-number">23245</span>,<br>            <span class="hljs-string">&quot;ExitCode&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;Error&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;StartedAt&quot;</span>: <span class="hljs-string">&quot;2018-09-17T01:41:26.494185806Z&quot;</span>,<br>            <span class="hljs-string">&quot;FinishedAt&quot;</span>: <span class="hljs-string">&quot;0001-01-01T00:00:00Z&quot;</span><br>        &#125;,<br>......<br></code></pre></td></tr></table></figure><hr><h2 id="停止-WEB-应用容器"><a href="#停止-WEB-应用容器" class="headerlink" title="停止 WEB 应用容器"></a>停止 WEB 应用容器</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker stop wizardly_chandrasekhar   <br>wizardly_chandrasekhar<br></code></pre></td></tr></table></figure><hr><h2 id="重启WEB应用容器"><a href="#重启WEB应用容器" class="headerlink" title="重启WEB应用容器"></a>重启WEB应用容器</h2><p>已经停止的容器，我们可以使用命令 docker start 来启动。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker start wizardly_chandrasekhar<br>wizardly_chandrasekhar<br></code></pre></td></tr></table></figure><p>docker ps -l 查询最后一次创建的容器：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#  docker ps -l </span><br><span class="hljs-attribute">CONTAINER</span> ID        IMAGE                             PORTS                     NAMES<br><span class="hljs-attribute">bf08b7f2cd89</span>        training/webapp     ...        <span class="hljs-number">0.0.0.0:5000</span>-&gt;<span class="hljs-number">5000</span>/tcp    wizardly_chandrasekhar<br></code></pre></td></tr></table></figure><p>正在运行的容器，我们可以使用 <strong>docker restart</strong> 命令来重启。</p><hr><h2 id="移除WEB应用容器"><a href="#移除WEB应用容器" class="headerlink" title="移除WEB应用容器"></a>移除WEB应用容器</h2><p>我们可以使用 docker rm 命令来删除不需要的容器</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker rm wizardly_chandrasekhar  <br>wizardly_chandrasekhar<br></code></pre></td></tr></table></figure><p>删除容器时，容器必须是停止状态，否则会报如下错误</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">runoob@runoob:~$ docker rm wizardly_chandrasekhar<br><span class="hljs-keyword">Error </span>response from daemon: You cannot remove a running container bf08b7f2cd897b5964943134aa6d373e355c286db9b9885b1f60b6e8f82b2b85. Stop the container before attempting removal or force remove<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Hello World (2)</title>
    <link href="/2022/02/03/Docker02/"/>
    <url>/2022/02/03/Docker02/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-Hello-World"><a href="#Docker-Hello-World" class="headerlink" title="Docker Hello World"></a>Docker Hello World</h1><p>Docker 允许你在容器内运行应用程序， 使用 <strong>docker run</strong> 命令来在容器内运行一个应用程序。</p><p>输出Hello world</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">15.10</span> /bin/echo <span class="hljs-string">&quot;Hello world&quot;</span><br><span class="hljs-title class_">Hello</span> world<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker19.png" srcset="/img/loading.gif" lazyload></p><p>各个参数解析：</p><ul><li><strong>docker:</strong> Docker 的二进制执行文件。</li><li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li><li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li><strong>&#x2F;bin&#x2F;echo “Hello world”:</strong> 在启动的容器里执行的命令</li></ul><p>以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin&#x2F;echo “Hello world”，然后输出结果。</p><hr><h2 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**”对话”**的能力：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -i -t <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">15.10</span> /bin/bash<br>root<span class="hljs-variable">@0123ce188bd8</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>各个参数解析：</p><ul><li><strong>-t:</strong> 在新容器内指定一个伪终端或终端。</li><li><strong>-i:</strong> 允许你对容器内的标准输入 (STDIN) 进行交互。</li></ul><p>注意第二行 **root@0123ce188bd8:&#x2F;#**，此时我们已进入一个 ubuntu15.10 系统的容器</p><p>我们尝试在容器中运行命令 <strong>cat &#x2F;proc&#x2F;version</strong>和<strong>ls</strong>分别查看当前系统的版本信息和当前目录下的文件列表</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">root@<span class="hljs-number">0123</span>ce188bd8:/#  cat /<span class="hljs-keyword">proc</span>/version<span class="hljs-title"></span><br><span class="hljs-title">Linux</span> version 4.4.0-151-generic (buildd@lgw01-amd64-043) (gcc<span class="hljs-title"> version</span> 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) ) #178-Ubuntu<span class="hljs-title"> SMP</span> Tue<span class="hljs-title"> Jun</span> 11 08:30:22<span class="hljs-title"> UTC</span> 2019<span class="hljs-title"></span><br><span class="hljs-title">root@0123ce188bd8:/#</span> ls<span class="hljs-title"></span><br><span class="hljs-title">bin</span> <span class="hljs-title"> boot</span> <span class="hljs-title"> dev</span> <span class="hljs-title"> etc</span> <span class="hljs-title"> home</span> <span class="hljs-title"> lib</span> <span class="hljs-title"> lib64</span> <span class="hljs-title"> media</span> <span class="hljs-title"> mnt</span> <span class="hljs-title"> opt</span> <span class="hljs-title"> proc</span> <span class="hljs-title"> root</span> <span class="hljs-title"> run</span> <span class="hljs-title"> sbin</span> <span class="hljs-title"> srv</span> <span class="hljs-title"> sys</span> <span class="hljs-title"> tmp</span> <span class="hljs-title"> usr</span> <span class="hljs-title"> var</span><br>root@0123ce188bd8:/# <br></code></pre></td></tr></table></figure><p>我们可以通过运行 exit 命令或者使用 CTRL+D 来退出容器。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">root@<span class="hljs-number">0123</span>ce188bd8:/<span class="hljs-comment">#  exit</span><br><span class="hljs-keyword">exit</span><br>root@hennessey:~<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>注意第三行中 <strong>root@hennessey:~#</strong> 表明我们已经退出了当前的容器，返回到当前的主机中。</p><hr><h2 id="启动容器（后台模式）"><a href="#启动容器（后台模式）" class="headerlink" title="启动容器（后台模式）"></a>启动容器（后台模式）</h2><p>使用以下命令创建一个以进程方式运行的容器</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -d <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">15.10</span> /bin/sh -c <span class="hljs-string">&quot;while true; do echo hello world; sleep 1; done&quot;</span><br><span class="hljs-number">2</span>b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63<br></code></pre></td></tr></table></figure><p>在输出中，我们没有看到期望的 “hello world”，而是一串长字符</p><p><strong>2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63</strong></p><p>这个长字符串叫做容器 ID，对每个容器来说都是唯一的，我们可以通过容器 ID 来查看对应的容器发生了什么。</p><p>首先，我们需要确认容器有在运行，可以通过 <strong>docker ps</strong> 来查看：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker ps<br><span class="hljs-title class_">CONTAINER</span> <span class="hljs-title class_">ID</span>        <span class="hljs-title class_">IMAGE</span>                  <span class="hljs-title class_">COMMAND</span>              ...  <br><span class="hljs-number">5917</span>eac21c36        <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">15.10</span>           <span class="hljs-string">&quot;/bin/sh -c &#x27;while t…&quot;</span>    ...<br></code></pre></td></tr></table></figure><p>输出详情介绍：</p><p><strong>CONTAINER ID:</strong> 容器 ID。</p><p><strong>IMAGE:</strong> 使用的镜像。</p><p><strong>COMMAND:</strong> 启动容器时运行的命令。</p><p><strong>CREATED:</strong> 容器的创建时间。</p><p><strong>STATUS:</strong> 容器状态。</p><p>状态有7种：</p><ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running 或 Up（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul><p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\udp）。</p><p><strong>NAMES:</strong> 自动分配的容器名称。</p><p>在宿主主机内使用 <strong>docker logs</strong> 命令，查看容器内的标准输出：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker logs <span class="hljs-number">2</span>b1b7a428627<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker23.png" srcset="/img/loading.gif" lazyload></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker logs amazing_cori<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker24.png" srcset="/img/loading.gif" lazyload></p><hr><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p>我们使用 <strong>docker stop</strong> 命令来停止容器:</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//docker25.png" srcset="/img/loading.gif" lazyload></p><p>通过 <strong>docker ps</strong> 查看，容器已经停止工作:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker ps<br></code></pre></td></tr></table></figure><p>可以看到容器已经不在了。</p><p>也可以用下面的命令来停止:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hennessey<span class="hljs-variable">@hennessey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker stop amazing_cori<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker架构学习笔记 (1)</title>
    <link href="/2022/02/03/Docker01/"/>
    <url>/2022/02/03/Docker01/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h1><p>Docker 包括三个基本概念:</p><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><p>Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p><table><thead><tr><th align="left">Docker</th><th align="left">面向对象</th></tr></thead><tbody><tr><td align="left">容器</td><td align="left">对象</td></tr><tr><td align="left">镜像</td><td align="left">类</td></tr></tbody></table><p><img src="https://www.runoob.com/wp-content/uploads/2016/04/576507-docker1.png" srcset="/img/loading.gif" lazyload></p><table><thead><tr><th align="left">概念</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Docker 镜像(Images)</td><td align="left">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td></tr><tr><td align="left">Docker 容器(Container)</td><td align="left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td></tr><tr><td align="left">Docker 客户端(Client)</td><td align="left">Docker 客户端通过命令行或者其他工具使用 Docker SDK (<a href="https://docs.docker.com/develop/sdk/">https://docs.docker.com/develop/sdk/</a>) 与 Docker 的守护进程通信。</td></tr><tr><td align="left">Docker 主机(Host)</td><td align="left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td></tr><tr><td align="left">Docker Registry</td><td align="left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td></tr><tr><td align="left">Docker Machine</td><td align="left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td></tr></tbody></table><p>PS:因为最近过年太无聊了，所以想学点东西。虽然之前也掌握一些docker命令，但还是想系统的学习一下（才不是想水博客呢）。大部分内容摘自<a href="https://www.runoob.com/docker/docker-architecture.html">菜鸟教程</a>，侵权联系删除</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 高级技巧 (9)</title>
    <link href="/2021/09/25/Markdown09/"/>
    <url>/2021/09/25/Markdown09/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">使用 &lt;<span class="hljs-selector-tag">kbd</span>&gt;Ctrl&lt;/<span class="hljs-selector-tag">kbd</span>&gt;+&lt;<span class="hljs-selector-tag">kbd</span>&gt;Alt&lt;/<span class="hljs-selector-tag">kbd</span>&gt;+&lt;<span class="hljs-selector-tag">kbd</span>&gt;<span class="hljs-selector-tag">Del</span>&lt;/<span class="hljs-selector-tag">kbd</span>&gt; 重启电脑<br></code></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//81999271-F914-428D-B7BF-164BDC67CAAC.jpg" srcset="/img/loading.gif" lazyload></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**文本加粗**</span> <br>\*\* 正常显示星号 \*\*<br></code></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//CA0E0162-0C48-41CD-B57A-CB32A4287C02.jpg" srcset="/img/loading.gif" lazyload></p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">\   反斜线<br>`   反引号<br><span class="hljs-bullet">*   </span>星号<br>_   下划线<br>&#123;&#125;  花括号<br>[]  方括号<br>()  小括号<br>#   井字号<br>+   加号<br><span class="hljs-bullet">-   </span>减号<br><span class="hljs-bullet">.   </span>英文句点<br>!   感叹号<br></code></pre></td></tr></table></figure><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p><strong>Markdown Preview Enhanced</strong> 使用 <a href="https://github.com/Khan/KaTeX">KaTeX</a> 或者 <a href="https://github.com/mathjax/MathJax">MathJax</a> 来渲染数学表达式。</p><p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions&#x2F;symbols 来了解 KaTeX 支持那些符号和函数。</p><p>默认下的分隔符：</p><ul><li><code>$...$</code> 或者 <code>\(...\)</code> 中的数学表达式将会在行内显示。</li><li><code>$$...$$</code> 或者 <code>\[...\]</code> 或者 &#96;&#96;&#96;&#96;math&#96; 中的数学表达式将会在块内显示。</li></ul><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//0e408954-fda8-11e5-9eb4-562d7c0ca431.gif" srcset="/img/loading.gif" lazyload></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$$</span><br>\<span class="hljs-keyword">begin</span>&#123;Bmatrix&#125;<br>   a &amp; b \\<br>   c &amp; d<br>\<span class="hljs-keyword">end</span>&#123;Bmatrix&#125;<br><span class="hljs-variable">$$</span><br><span class="hljs-variable">$$</span><br>\<span class="hljs-keyword">begin</span>&#123;CD&#125;<br>   A @&gt;a&gt;&gt; B \\<br><span class="hljs-variable">@VbVV</span> <span class="hljs-variable">@AAcA</span> \\<br>   C @= D<br>\<span class="hljs-keyword">end</span>&#123;CD&#125;<br><span class="hljs-variable">$$</span><br></code></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//A9031CEB-04DB-4822-9C98-2E99489D3662.jpeg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 表格 (8)</title>
    <link href="/2021/09/24/Markdown08/"/>
    <url>/2021/09/24/Markdown08/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  ----  </span>|<span class="hljs-string"> ----  </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><p>以上代码显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//23EACC50-38E0-4284-B99A-6BC22E284BAC.jpg" srcset="/img/loading.gif" lazyload></p><p>对齐方式</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><p>以上代码显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//87DE9D5C-44FB-4693-8735-194D3779EC3E.jpg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 图片 (7)</title>
    <link href="/2021/09/23/Markdown07/"/>
    <url>/2021/09/23/Markdown07/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址)<br><br>!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)<br></code></pre></td></tr></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>使用实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">![RUNOOB 图标](http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png)<br><br>![RUNOOB 图标](http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png <span class="hljs-string">&quot;RUNOOB&quot;</span>)<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//A042DF30-C232-46F3-8436-7D6C35351BBD.jpg" srcset="/img/loading.gif" lazyload></p><p>当然，你也可以像网址那样对图片网址使用变量:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">这个链接用 <span class="hljs-number">1</span> 作为网址变量 [RUNOOB][<span class="hljs-number">1</span>].<br>然后在文档的结尾为变量赋值（网址）<br><br>[<span class="hljs-number">1</span>]: http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//75AA6EBF-CC57-44A6-A585-5EE3DD94E42A.jpg" srcset="/img/loading.gif" lazyload></p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//55F2A67D-F4BD-4960-AC55-DC690A415878.jpg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 链接 (6)</title>
    <link href="/2021/09/22/Markdown06/"/>
    <url>/2021/09/22/Markdown06/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接名称]</span>(链接地址)<br><br>或者<br><br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">这是一个链接 <span class="hljs-selector-attr">[菜鸟教程]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//www.runoob.com)</span><br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//49E6CB42-F780-4DA6-8290-DC757B51FB9A.jpg" srcset="/img/loading.gif" lazyload></p><p>直接使用链接地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;https:<span class="hljs-regexp">//</span>www.runoob.com&gt;<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/9BFF60A1-DD71-4B63-987B-4665B31C7787.jpg" srcset="/img/loading.gif" lazyload></p><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less">这个链接用 <span class="hljs-number">1</span> 作为网址变量 <span class="hljs-selector-attr">[Google]</span><span class="hljs-selector-attr">[1]</span><br>这个链接用 <span class="hljs-selector-tag">runoob</span> 作为网址变量 <span class="hljs-selector-attr">[Runoob]</span><span class="hljs-selector-attr">[runoob]</span><br>然后在文档的结尾为变量赋值（网址）<br><br>  <span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.google.com/</span><br>  <span class="hljs-selector-attr">[runoob]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.runoob.com/</span><br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//EC3ED5D2-4F0D-492A-81B3-D485623D1A9E.jpg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 代码 (5)</title>
    <link href="/2021/09/21/Markdown05/"/>
    <url>/2021/09/21/Markdown05/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**&#96;**），例如：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`printf()` 函数<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//C928FDA3-E0A7-4AFF-AB2A-B3AF44F93DF9.jpg" srcset="/img/loading.gif" lazyload alt="img"></p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>实例如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//55EDFE05-5F27-458E-AFE0-7B96685C9603.jpg" srcset="/img/loading.gif" lazyload alt="img"></p><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//6DC89E5C-B41A-4938-97D8-D7D06B879F91.jpg" srcset="/img/loading.gif" lazyload alt="img"></p><p>你也可以用 <strong>&#96;&#96;&#96;</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">```<span class="language-javascript">javascript</span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span>```<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//88F52386-2F98-4D7E-8935-E43BECA6D868.jpg" srcset="/img/loading.gif" lazyload alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 区块 (4)</title>
    <link href="/2021/09/20/Markdown04/"/>
    <url>/2021/09/20/Markdown04/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块引用</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">菜鸟教程</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">学的不仅是技术更是梦想</span><br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//DFE1124E-BC38-4C12-B7AC-053E560D4C9C.jpg" srcset="/img/loading.gif" lazyload></p><p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">最外层</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 第一层嵌套</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//AA0A4A6A-33A7-48C7-971F-73FFC8FE85B0.jpg" srcset="/img/loading.gif" lazyload></p><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块中使用列表</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 第一项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 第二项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第一项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第二项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第三项</span><br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//E3BF6399-6483-4C7A-8502-AE75E8D66C96.jpg" srcset="/img/loading.gif" lazyload></p><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><p>列表中使用区块实例如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>第一项<br><span class="hljs-code">    &gt; 菜鸟教程</span><br><span class="hljs-code">    &gt; 学的不仅是技术更是梦想</span><br><span class="hljs-bullet">* </span>第二项<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//1B894FB4-53AC-4E2D-BA30-F4AE4DFA8B97.jpg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 列表 (3)</title>
    <link href="/2021/09/19/Markdown03/"/>
    <url>/2021/09/19/Markdown03/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//89446A8E-6D83-4666-AACC-980145D5F070.jpg" srcset="/img/loading.gif" lazyload alt="img"></p><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//560384BB-2B00-41D5-ACF2-18972F7F2775.jpg" srcset="/img/loading.gif" lazyload alt="img"></p><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">    -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">    -</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//8ED795DA-F124-4E70-BA71-57CD9CF958A4.jpg" srcset="/img/loading.gif" lazyload alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 段落 (2)</title>
    <link href="/2021/09/18/Markdown02/"/>
    <url>/2021/09/18/Markdown02/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg" srcset="/img/loading.gif" lazyload></p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//3F254936-778E-417A-BEF2-467116A55D00.jpg" srcset="/img/loading.gif" lazyload></p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-emphasis">__粗体文本__</span><br><span class="hljs-strong">***粗斜体文本**</span>*<br><span class="hljs-emphasis">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//md3.gif" srcset="/img/loading.gif" lazyload></p><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">*</span> <span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong"></span><br><span class="hljs-strong">**</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">- - -</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">----------</span></span><br></code></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//3F46EAA9-DADE-48FD-99AA-DF7BEBFAA4FA.jpg" srcset="/img/loading.gif" lazyload></p><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">RUNOOB<span class="hljs-selector-class">.COM</span><br>GOOGLE<span class="hljs-selector-class">.COM</span><br>~~BAIDU.COM~~<br></code></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//B5270A31-15D0-410B-AE1D-B9655B8F331C.jpg" srcset="/img/loading.gif" lazyload></p><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <strong>&lt; u &gt;</strong> 标签来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//05A27273-B66D-43DE-A3DB-0D32FF024093.jpg" srcset="/img/loading.gif" lazyload></p><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[^要注明的文本]</span><br></code></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">创建脚注格式类似这样 [^RUNOOB]。<br><br>[<span class="hljs-symbol">^RUNOOB</span>]: <span class="hljs-link">菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span><br></code></pre></td></tr></table></figure><p>演示效果如下：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//md5.gif" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 标题 (1)</title>
    <link href="/2021/09/17/Markdown01/"/>
    <url>/2021/09/17/Markdown01/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>Markdown 标题有两种格式。</p><h3 id="1、使用-x3D-和-标记一级和二级标题"><a href="#1、使用-x3D-和-标记一级和二级标题" class="headerlink" title="1、使用 &#x3D; 和 - 标记一级和二级标题"></a>1、使用 &#x3D; 和 - 标记一级和二级标题</h3><p>&#x3D; 和 - 标记语法格式如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">我展示的是一级标题</span><br><span class="hljs-section">=================</span><br><br><span class="hljs-section">我展示的是二级标题</span><br><span class="hljs-section">-----------------</span><br></code></pre></td></tr></table></figure><p>显示效果如下图：<br><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//image-20220203163301797.png" srcset="/img/loading.gif" lazyload></p><h3 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h3><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><p>显示效果如下图：</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/img//md2.gif" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯网址拦截申诉方法</title>
    <link href="/2021/09/09/%E8%85%BE%E8%AE%AF%E7%BD%91%E5%9D%80%E6%8B%A6%E6%88%AA%E7%94%B3%E8%AF%89%E6%96%B9%E6%B3%95/"/>
    <url>/2021/09/09/%E8%85%BE%E8%AE%AF%E7%BD%91%E5%9D%80%E6%8B%A6%E6%88%AA%E7%94%B3%E8%AF%89%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>貌似从六月份开始，腾讯就开启了白名单，没在白名单里面的网址基本上都被拦截了，想我这种穷b自然不会有服务器来备案，这样就显得很不方便，于是开始以下几个方式进行申诉：</p><h2 id="申诉："><a href="#申诉：" class="headerlink" title="申诉："></a>申诉：</h2><p>一、通过公众号进行申诉（推荐）<br>首先推荐这个方法，因为可能会审核的快一点～<br>微信公众号搜索腾讯安全反诈骗实验室<br>联系我们&gt;网址申诉</p><p><img src="http://image.coolapk.com/feed/2021/0705/08/1112905_36499039_3779_0216@1080x2400.png.m.jpg" srcset="/img/loading.gif" lazyload></p><p>然后填写信息</p><p><img src="http://image.coolapk.com/feed/2021/0705/08/1112905_fc57b28a_3779_0218@1080x2400.jpeg.m.jpg" srcset="/img/loading.gif" lazyload></p><p><img src="http://image.coolapk.com/feed/2021/0705/08/1112905_fdf5d9e8_3779_0219@1080x2400.jpeg.m.jpg" srcset="/img/loading.gif" lazyload></p><p>填写完成等待审核就OK了～</p><p>二、通过腾讯安全-网址中心官网进行申诉（推荐）<br>打开官网<a href="https://urlsec.qq.com/complain.html">查看链接</a><br>网址申诉，按照要求填写进行申诉等待审核<br>没备案的网址不用填就好了，不过可能会比备案的慢点。</p><p>三、通过QQ拦截页面底部申诉地址申诉<br>最后一个就是通过QQ的拦截页面提供的申诉地址进行申诉了。</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>个人是很不推荐最后一个，一般一个月时间都没消息<br>推荐的就是上面两个都去申请一下会好一点。<br>申请完等待2～3天就行了，通过会以邮箱进行通知你～</p><p><img src="http://image.coolapk.com/feed/2021/0705/08/1112905_15e3fe80_3779_0221@1080x2400.jpeg.m.jpg" srcset="/img/loading.gif" lazyload></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.rz.sb/archives/940/">腾讯网址拦截申诉方法</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>腾讯</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器获取京东Cookie教程</title>
    <link href="/2021/08/29/JD-Cookie/"/>
    <url>/2021/08/29/JD-Cookie/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器获取京东Cookie教程"><a href="#浏览器获取京东Cookie教程" class="headerlink" title="浏览器获取京东Cookie教程"></a>浏览器获取京东Cookie教程</h1><h2 id="浏览器要求："><a href="#浏览器要求：" class="headerlink" title="浏览器要求："></a>浏览器要求：</h2><p>PC Chromium 内核大于等于80版例如：</p><ul><li><a href="https://www.google.com/intl/zh-CN/chrome/">Chrome</a></li><li><a href="http://www.centbrowser.cn/">百分浏览器</a></li><li><a href="https://www.twinkstar.com/">星愿浏览器</a></li></ul><p>AndroidKiwi Browser浏览器</p><p>具体操作步骤基本相同，这里以PC端为例</p><h2 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h2><p>浏览器打开京东网址：<a href="https://links.jianshu.com/go?to=https://m.jd.com/">https://m.jd.com/</a></p><p>请自行登入京东账户，打开开发者工具</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/Blog-img/20220101//hG4Bd0.png" srcset="/img/loading.gif" lazyload></p><p>点击底栏“我的”，在开发者工具找到“Network”窗口，并找到log开头的日志 </p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/Blog-img/20220101//hG5PSg.png" srcset="/img/loading.gif" lazyload></p><p>在其中找到cookie开头的代码段</p><p><img src="https://hennessey02.coding.net/p/Pic/d/Pic01/git/raw/master/Blog-img/20220101//hG5O9U.png" srcset="/img/loading.gif" lazyload></p><p>最后取出形如 pt_key&#x3D;xxxx;pt_pin&#x3D;xxxx; 的字段，我们就得到我们想要的东西了</p><p>如果想加入我的JD代挂程序，请发送抓取到的字段到我的邮箱 <a href="mailto:&#x32;&#57;&#52;&#x39;&#56;&#54;&#56;&#x39;&#x36;&#x38;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x32;&#57;&#52;&#x39;&#56;&#54;&#56;&#x39;&#x36;&#x38;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a> 并更改邮件标题为“JDCookie提交”或私发给我的QQ号</p>]]></content>
    
    
    
    <tags>
      
      <tag>JD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneManager高级设置</title>
    <link href="/2021/08/18/OneManager/"/>
    <url>/2021/08/18/OneManager/</url>
    
    <content type="html"><![CDATA[<h2 id="OneManager是什么"><a href="#OneManager是什么" class="headerlink" title="OneManager是什么"></a>OneManager是什么</h2><p>这是一个利用微软onedrive api将onedrive目录映射成一个云盘的程序，类似的程序有很多，比如OneIndex、Pyone、OnePoint等等。这个程序的特点是支持多种onedrive类型，可以部署在vps，heroku，以及腾讯云scf上。<br><a href="https://github.com/qkqpttgf/OneManager-php">项目地址</a> <a href="https://service-ps9dmx7o-1304376991.hk.apigw.tencentcs.com/release/Cloud/CloudA/">我的Demo</a></p><h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><p>参考项目readme说明，网上一些博客也有不少教程，这不是本文的重点，本文主要讲的是部署好后的设置问题。<br>部署成功后在设置-&gt;首页里添加相应的盘，可以添加多个盘，同一个盘也可以添加多次。</p><h2 id="平台变量"><a href="#平台变量" class="headerlink" title="平台变量"></a>平台变量</h2><p>登录后，在<code>管理</code>&gt;<code>设置</code>里有一些自定义设置，有些人不清楚这些设置是干嘛的，这可以理解，毕竟项目的说明写的太简单了。<br>注意本文的操作都是针对程序默认主题来说的，其他主题由于是第三方人员开发，不保证所有功能都能正常使用。</p><h3 id="adminloginpage"><a href="#adminloginpage" class="headerlink" title="adminloginpage"></a>adminloginpage</h3><p>自定义登录地址，设置后就会隐藏登录按钮(有些主题本来就没有登录按钮)，登录时需要手动在网盘地址后加上<code>?你设置的值</code>进行登录。<br>比如设置为<code>abc</code>，那么你只能通过<code>http://xxx.com/xxx?abc</code>地址来登录 。所以一旦设置就要记住你设置的值，不然连你自己也没法知道登录地址那就麻烦了。<br>这个设置是为了防止别人通过默认的登录界面尝试登录你的网盘，设置本项后只要猜不到登录界面，即使别人知道登录密码也没用，多一道防护墙，让网盘更安全。</p><h3 id="autoJumpFirstDisk"><a href="#autoJumpFirstDisk" class="headerlink" title="autoJumpFirstDisk"></a>autoJumpFirstDisk</h3><p>设置点击网盘标题时跳转到绑定的第一个盘还是当前绑定的网盘根目录。</p><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>自定义背景图片，填入一个图片的url地址，因为图片加载通常需要更多时间，为了速度考虑不建议放入大体积图片。</p><h3 id="backgroundm"><a href="#backgroundm" class="headerlink" title="backgroundm"></a>backgroundm</h3><p>手机端显示的背景图片地址。</p><h3 id="customCss"><a href="#customCss" class="headerlink" title="customCss"></a>customCss</h3><p>设置自定义css的地方，这里设置的css会作用于网盘所有页面。<br>比如我想隐藏语言选项框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.changelanguage</span>&#123;<span class="hljs-attribute">display</span>:none&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同时隐藏复制下载链接按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.file</span> <span class="hljs-selector-tag">button</span>&#123;<span class="hljs-attribute">display</span>:none&#125;<span class="hljs-selector-class">.changelanguage</span>&#123;<span class="hljs-attribute">display</span>:none&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="customScript"><a href="#customScript" class="headerlink" title="customScript"></a>customScript</h3><p>设置自定义js，会作用于所有页面。<br>比如设置http重定向到https：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> targetProtocol = <span class="hljs-string">&quot;https:&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span> != targetProtocol)</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = targetProtocol + <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span>.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="customTheme"><a href="#customTheme" class="headerlink" title="customTheme"></a>customTheme</h3><p>通过url的方式引用html主题，比如你可以通过设置下面的地址来使用我的主题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">https://cdn.jsdelivr.net/gh/kizx/onemoe-theme/onemoe.html<br></code></pre></td></tr></table></figure><h3 id="disableChangeTheme"><a href="#disableChangeTheme" class="headerlink" title="disableChangeTheme"></a>disableChangeTheme</h3><p>设置为<code>1</code>后游客浏览时将不显示右下角的主题切换功能。</p><h3 id="disableShowThumb"><a href="#disableShowThumb" class="headerlink" title="disableShowThumb"></a>disableShowThumb</h3><p>设置为<code>1</code>后将不显示缩略图的按钮和功能，对于云函数用户来说，建议设为<code>1</code>来关闭该功能，因为该功能可能点一下就是一分钱。</p><h3 id="hideFunctionalityFile"><a href="#hideFunctionalityFile" class="headerlink" title="hideFunctionalityFile"></a>hideFunctionalityFile</h3><p>设置为<code>1</code>后，游客浏览网盘时就会看不到read.md，head.md，head.ofm，foo.omf这些文件，这些文件是干嘛的后面会说。</p><h3 id="passfile"><a href="#passfile" class="headerlink" title="passfile"></a>passfile</h3><p>设置密码文件名，比如这里设置为password.txt，那么在某一个目录下新建一个password.txt文件，其中写入密码，这样任何人在浏览这个网盘目录时都需要输入相应密码后才能访问。</p><h3 id="sitename"><a href="#sitename" class="headerlink" title="sitename"></a>sitename</h3><p>设置网站名称。</p><h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><p>切换主题。</p><h3 id="timezone"><a href="#timezone" class="headerlink" title="timezone"></a>timezone</h3><p>设置时区，国内可设置为8。</p><h2 id="每个盘独立变量"><a href="#每个盘独立变量" class="headerlink" title="每个盘独立变量"></a>每个盘独立变量</h2><h3 id="diskname"><a href="#diskname" class="headerlink" title="diskname"></a>diskname</h3><p>多盘在网盘界面显示的名称。</p><h3 id="domain-path"><a href="#domain-path" class="headerlink" title="domain_path"></a>domain_path</h3><p>当绑定多个域名时，可以使不同域名打开时访问不同目录。当然如果你只有一个域名也可以用，通过这种方式可以使当前域名访问一个指定子目录，和后面的public_path起到一样的作用。<br>下面是两个域名的设置方法，中间用<code>|</code>隔开，如果有多个域名只设置一个域名时，未设置的域名好像也会只访问该目录，要访问根目录dirname设置为<code>/</code>。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">domain1.com:/dir1name|domain2.com:/dir2name<br></code></pre></td></tr></table></figure><h3 id="downloadencrypt"><a href="#downloadencrypt" class="headerlink" title="downloadencrypt"></a>downloadencrypt</h3><p>设置为<code>1</code>时启用该功能，这样在设置了密码的目录下的文件虽然无法在网页端浏览，但可以通过具体的文件链接进行下载。</p><h3 id="guestup-path"><a href="#guestup-path" class="headerlink" title="guestup_path"></a>guestup_path</h3><p>设置图床路径或者叫游客上传路径，设置后游客只能看到上传按钮看不到目录下的文件。</p><h3 id="public-path"><a href="#public-path" class="headerlink" title="public_path"></a>public_path</h3><p>设置该盘的显示的根目录，默认为<code>/</code>，换个说法就是可以显示指定的文件夹，默认显示全部。<br>比如我们只想将网盘下的public文件夹内容作为网盘，可以设置为<code>/public/</code>。<br>有了这个功能，即使只有一个onedrive账号，我们也可以通过重复绑定同一个账号来生成多盘，然后每个盘的public_path设置为不同的路径，这样可以将一个盘的功能分开。</p><hr><p>还有一种特殊情况是我既想让游客上传文件，又想让游客看见上传后的文件目录，目前就只能通过这种方法将该目录设置到两个盘，一个盘作上传，一个盘作目录展示。</p><h2 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h2><h3 id="设置网站ico图标"><a href="#设置网站ico图标" class="headerlink" title="设置网站ico图标"></a>设置网站ico图标</h3><p>将favicon.ico图片放在网盘根目录下，<del>如果你设置了多盘的的话，则需要在每个盘的根目录下都放置一个favicon.ico文件</del>，新版的html主题只需要在绑定的第一个盘下面设置就行了。<br>当然你也可以在customCss或customScript中进行全局设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cloud.tencent.com/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br>这里我使用了腾讯云的网站图标，你应该改为自己的favicon.ico图片地址。<br></code></pre></td></tr></table></figure><h3 id="刷新自动切换背景图片"><a href="#刷新自动切换背景图片" class="headerlink" title="刷新自动切换背景图片"></a>刷新自动切换背景图片</h3><p>这个是通过设置特殊的图片api来实现的，这些api每次刷新都会返回一张不同的图片，将后台background设置为这些api的url即可。<br>网上类似的api有很多，以下是群友收集的免费图片api：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">https://api.ixiaowai.cn/api/api.php (二次元动漫)<br>http://www.dmoe.cc/random.php（二次元随机图）<br>https://api.ixiaowai.cn/mcapi/mcapi.php （menhera酱）<br>https://api.ixiaowai.cn/gqapi/gqapi.php （风景）<br>https://acg.yanwz.cn/wallpaper/api.php（二次元随机图）<br></code></pre></td></tr></table></figure><h3 id="利用index-html设置自定义页面"><a href="#利用index-html设置自定义页面" class="headerlink" title="利用index.html设置自定义页面"></a>利用index.html设置自定义页面</h3><p>如果一个目录下有名为index.html的文件，则直接显示该文件，可以利用这个功能设置一个自定义页面或者用于隐藏一个特定页面，相当于部署了一个静态页面。</p><h3 id="设置顶部和底部说明文字"><a href="#设置顶部和底部说明文字" class="headerlink" title="设置顶部和底部说明文字"></a>设置顶部和底部说明文字</h3><p>在需要展示顶部说明的目录下新建一个<code>head.md</code>文件，在文件里写入说明内容即可，这是一个markdown文件，可以使用markdown语言进行书写。<br>底部说明说明文字对应的是<code>readme.md</code>文件，规则与顶部文字一样。</p><h3 id="利用head-omf设置一言"><a href="#利用head-omf设置一言" class="headerlink" title="利用head.omf设置一言"></a>利用head.omf设置一言</h3><p>head.omf作用和head.md一样，区别是他不支持markdonw语言，但是支持html语言，可以写入html、css、js内容。<br>在想展示一言的目录新建<code>head.omf</code>文件，然后写入以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span>:D 获取中...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://v1.hitokoto.cn&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> hitokoto = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;hitokoto&#x27;</span>)</span><br><span class="language-javascript">            hitokoto.<span class="hljs-property">innerText</span> = data.<span class="hljs-property">hitokoto</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上是使用了<a href="https://developer.hitokoto.cn/">https://developer.hitokoto.cn/</a> 的一言接口，你也可以尝试更换其他接口或者自建接口。</p><h3 id="利用foot-omf设置Valine评论"><a href="#利用foot-omf设置Valine评论" class="headerlink" title="利用foot.omf设置Valine评论"></a>利用foot.omf设置Valine评论</h3><p>使用Valine需要先注册<a href="https://www.leancloud.cn/">LeanCloud</a>并实名认证，然后新建应用获取AppID和AppKey。<br>具体过程参考：<a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a><br>然后新建<code>foot.omf</code>，写入以下内容（注意填入替换自己的AppID和AppKey）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vcomments&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Valine</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vcomments&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;你获取的AppID&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">appKey</span>: <span class="hljs-string">&#x27;你获取的AppKey&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ps: 上面的js用的是unpkg的cdn，国内速度完全不行，建议改用jsdelivr的cdn</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;//cdn.jsdelivr.net/npm/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>如果对样式不满意，建议直接在omf文件写css美化。</li></ul><h3 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h3><p>这里的动态背景指我们经常在一些网页见到的那种下雪、粒子线条、彩条等动态背景，一般是通过js实现的，可以自己在网上找找现成的教程，js我不会，这里只展示一种我找到的动态彩条背景。<br>我将下面的代码写在了foot.omf中，可以访问 <a href="https://pan.2bboy.com/home/test/colored-ribbon/">https://pan.2bboy.com/home/test/colored-ribbon/</a> 查看其效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;90&quot;</span> <span class="hljs-attr">alpha</span>=<span class="hljs-string">&quot;0.5&quot;</span> <span class="hljs-attr">zIndex</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://pan.2bboy.com/ppx/test/ribbon.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中最重要的是 ribbon.js 这个js文件，我将他放在网盘目录下，你应该下载该文件放在自己的云空间里，然后替换引用的地址。<br>如果将代码放在omf文件里则只能在当前目录有效果，设置在后台的customScript中就可以全局生效了。</p><p>当然只要你懂点js，利用omf文件可以玩出很多东西，比我这里有一些示例：<a href="https://pan.2bboy.com/home/test/">https://pan.2bboy.com/home/test/</a></p><h3 id="美化自定义登录页面"><a href="#美化自定义登录页面" class="headerlink" title="美化自定义登录页面"></a>美化自定义登录页面</h3><p>修改common.php相应地方，添加style和br</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;style&gt;body&#123;background-image:linear-gradient(60deg,#343b44 0%,#485563 100%);background-attachment:fixed;color:#343b44&#125;body&gt;div&#123;position:absolute;text-align:center;background-color:rgba(221,221,221,.5);border-radius:20px;width:75vw;max-width:500px;height:350px;margin:auto;top:25%;bottom:50%;left:0;right:0&#125;body&gt;div:hover&#123;box-shadow:3px 3px 6px 3px rgba(0,0,0,.3)&#125;h4&#123;font-size:40px&#125;input&#123;font-size:20px;margin:2%auto;border:#343b44 2px solid;border-radius:10px;padding:10px;height:50px;text-align:center&#125;input:last-of-type&#123;color:#343b44;height:50px;width:80px;font-weight:800&#125;input:hover:last-of-type&#123;cursor:pointer;color:#ddd;background-color:#485563&#125;&lt;/style&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;center&gt;&lt;h4&gt;&#x27;</span>.<span class="hljs-title function_ invoke__">getconstStr</span>(<span class="hljs-string">&#x27;InputPassword&#x27;</span>).<span class="hljs-string">&#x27;&lt;/h4&gt;</span><br><span class="hljs-string">      &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-string">          &lt;div&gt;</span><br><span class="hljs-string">            &lt;input name=&quot;password1&quot; type=&quot;password&quot;/&gt;</span><br><span class="hljs-string">            &lt;/br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">getconstStr</span>(<span class="hljs-string">&#x27;Login&#x27;</span>).<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">      &lt;/form&gt;</span><br><span class="hljs-string">      &lt;/center&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&#x27;</span>;<br></code></pre></td></tr></table></figure><p><a href="https://pan.2bboy.com/img/2020/05/0530183122.png"><img src="https://pan.2bboy.com/img/2020/05/0530183122.png" srcset="/img/loading.gif" lazyload alt="img"></a></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>游客上传文件时只能单个上传，不能批量上传。</li><li>由于scf的缓存系统，在scf上进行某项改动后有时候不会立马生效，或者刷新后时而生效时而不生效，只要多等一会儿，等旧缓存自己失效就好了。</li><li>php格式的主题为旧版主题，许多功能不支持，html格式的主题为新版主题，不同主题的作者更新频率和支持功能都可能不同，功能测试请以最新版本的默认主题为准。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Onedrive云盘程序——OneManager小白设置指南<br><a href="https://www.2bboy.com/archives/176.html/comment-page-1">https://www.2bboy.com/archives/176.html/comment-page-1</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Onedrive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Termux/Linux搭建Hexo博客</title>
    <link href="/2021/08/17/Termux-Hexo/"/>
    <url>/2021/08/17/Termux-Hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a><strong>Hexo简介</strong></h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。<span id="more"></span>大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install git -y<br></code></pre></td></tr></table></figure><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a><strong>安装nodejs</strong></h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install nodejs npm -y<br></code></pre></td></tr></table></figure><p>安装完后，输入命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><br>npm -v<br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><p>更换npm源为淘宝源</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a><strong>安装hexo</strong></h2><p>前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹filename，然后cd到这个文件夹下</p><p>输入命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br><br>hexo -v   <span class="hljs-meta">#查看版本信息</span><br></code></pre></td></tr></table></figure><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_1425592747878800930944621.png" srcset="/img/loading.gif" lazyload></p><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a><strong>初始化hexo</strong></h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">hexo init <span class="hljs-built_in">filename</span>(文件名随意定义)<br><br>cd filename <span class="hljs-comment">//进入这个文件夹</span><br><br>npm install<br></code></pre></td></tr></table></figure><ul><li>cd <folder> #说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为hexo,~&#x2F;root&#x2F;hexo以下将使用这个文件夹）</li><li>hexo init #说明：自动在文件夹（hexo1）中创建项目所需的文件</li><li>npm install #说明：安装依赖包</li><li>hexo generate #说明：构建，会在hexo1中创建public文件夹<br>执行完以上命令后，会多出以下文件和文件夹</li></ul><p>例如</p><p><img src="https://linuecs.files.wordpress.com/2020/08/img_20200803_1018077824263297184815366.jpg" srcset="/img/loading.gif" lazyload></p><p>新建完成后，指定文件夹目录下有：</p><ul><li>_config.yml：站点的配置文件，需要备份</li><li>themes：主题文件夹，需要备份</li><li>source：博客文章的 .md 文件，需要备份</li><li>scaffolds：文章的模板，需要备份</li><li>package.json：安装包的名称，需要备份</li><li>.gitignore：限定在 push 时哪些文件可以忽略，需要备份</li><li>.git：主题和站点都有，标志这是一个 git 项目，不需要备份</li><li>node_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份</li><li>public：是 hexo g 生成的静态网页，不需要备份</li><li>.deploy_git：同上，hexo g 也会生成，不需要备份</li><li>db.json：文件，不需要备份</li></ul><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_1430267700908023566336224.png" srcset="/img/loading.gif" lazyload></p><p>输入命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_1426494387056801777394283.png" srcset="/img/loading.gif" lazyload></p><p>输入命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_1427121834223231530076486.png" srcset="/img/loading.gif" lazyload></p><p>打开hexo的服务</p><p>在浏览器输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">**http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span>**<br></code></pre></td></tr></table></figure><p>就可以看到你生成的博客</p><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_1435241192715661277456756.png" srcset="/img/loading.gif" lazyload></p><p><strong>使用ctrl+c停止服务</strong></p><h2 id="Hexo-Github"><a href="#Hexo-Github" class="headerlink" title="Hexo+Github"></a><strong>Hexo+Github</strong></h2><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a><strong>GitHub创建个人仓库</strong></h2><p>注册登录<a href="http://github.com/">github官网</a>，点击右上角加号，点击New repository，新建仓库</p><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_1453048826363041159371369.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>创建一个和用户名相同的仓库,即<a href="http://xxxx.github.io,其中xxx是github的用户名/">http://xxxx.github.io，其中xxx是github的用户名</a></p><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_145655625734147419220357.png" srcset="/img/loading.gif" lazyload></p><p>点击create repository</p><h3 id="Git初始化设置"><a href="#Git初始化设置" class="headerlink" title="Git初始化设置"></a><strong>Git初始化设置</strong></h3><p>输入命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span> <br><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>(yourname是github用户名，youremail是注册github的邮箱)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br><br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>检查是否正确，输入命令</p><h3 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a><strong>生成SSH添加到GitHub</strong></h3><p>输入命令，创建SSH,一路回车</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://linuecs.files.wordpress.com/2020/08/img_20200802_1139583858709568397913356.jpg" srcset="/img/loading.gif" lazyload></p><p>查看SSH KEY，输入命令</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br></code></pre></td></tr></table></figure><p>复制id_rsa.pub里面的全部内容</p><p><img src="https://linuecs.files.wordpress.com/2020/08/img_20200803_0950183625923031218189922.jpg" srcset="/img/loading.gif" lazyload></p><p>在github的setting中，找到SSH keys的设置选项，点击New SSH key，粘贴id_rsa.pub里面的全部内容</p><p><img src="https://linuecs.files.wordpress.com/2020/08/screenshot_2020_0801_151404755358037895170688.png" srcset="/img/loading.gif" lazyload></p><p>输入命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>查看是否连接成功</p><p><img src="https://linuecs.files.wordpress.com/2020/08/img_20200803_0950366233783924410194530.jpg" srcset="/img/loading.gif" lazyload></p><p>打开站点配置文件 _config.yml，修改添加以下内容</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span><br>git@github.com:yourgithubname/yourgithubname.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>安装deploy-git ，也就是部署的命令,这样才能用命令部署到github</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>输入命令</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean 第一次安装不用清缓存<br><br>hexo clean &amp;&amp;　hexo g -d 　缩写<br><br>hexo g = hexo <span class="hljs-keyword">generate</span> 生成静态文件<br><br>hexo <span class="hljs-keyword">generate</span> -deploy 生成静态文件后立即部署网站<br></code></pre></td></tr></table></figure><p>打开下面的网址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">**http:<span class="hljs-regexp">//y</span>ourname.github.io**<br></code></pre></td></tr></table></figure><p>就可看到和</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">**http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span>**<br></code></pre></td></tr></table></figure><p>一样的了！</p><h2 id="关联Git仓库"><a href="#关联Git仓库" class="headerlink" title="关联Git仓库"></a><strong>关联Git仓库</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/你的用户名/</span>你的用户名.github.io.git<br></code></pre></td></tr></table></figure><p>执行之后会在当前目录生成’你的用户名.github.io’的文件夹，这是关联github仓库的文件夹，需要上传的文件都会移动到这里</p><p>更多精彩内容请点击<a href="https://hexo.io/zh-cn/docs/"><strong>hexo官网</strong></a>docs&#x2F;)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Termux</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
